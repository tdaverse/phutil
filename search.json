[{"path":[]},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement aymeric.stamm@cnrs.fr. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tdaverse.github.io/phutil/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://tdaverse.github.io/phutil/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 phutil authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE. software depends Boost C++ library, whose licence requires following notice (pertaining Boost source files) included copies derivative works Boost: Boost Software License - Version 1.0 - August 17th, 2003 Permission hereby granted, free charge, person organization obtaining copy software accompanying documentation covered license (“Software”) use, reproduce, display, distribute, execute, transmit Software, prepare derivative works Software, permit third-parties Software furnished , subject following: copyright notices Software entire statement, including license grant, restriction following disclaimer, must included copies Software, whole part, derivative works Software, unless copies derivative works solely form machine-executable object code generated source language processor. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE, TITLE NON-INFRINGEMENT. EVENT SHALL COPYRIGHT HOLDERS ANYONE DISTRIBUTING SOFTWARE LIABLE DAMAGES LIABILITY, WHETHER CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tdaverse.github.io/phutil/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aymeric Stamm. Author, maintainer. Jason Cory Brunson. Contributor.","code":""},{"path":"https://tdaverse.github.io/phutil/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stamm (2025). phutil: Persistence Homology Utilities. R package version 0.0.0.9000, https://github.com/tdaverse/phutil.","code":"@Manual{,   title = {phutil: Persistence Homology Utilities},   author = {Aymeric Stamm},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/tdaverse/phutil}, }"},{"path":"https://tdaverse.github.io/phutil/index.html","id":"phutil","dir":"","previous_headings":"","what":"Persistence Homology Utilities","title":"Persistence Homology Utilities","text":"goal phutil package provide utility functions persistence data analysis. particular, package defines data structure hosting persistence data. package part tdaverse suite packages, aims provide consistent interface topological data analysis R nicely integrates tidymodels ecosystem.","code":""},{"path":"https://tdaverse.github.io/phutil/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Persistence Homology Utilities","text":"can install development version phutil GitHub :","code":"# install.packages(\"pak\") pak::pak(\"tdaverse/phutil\")"},{"path":"https://tdaverse.github.io/phutil/index.html","id":"the-persistence-class","dir":"","previous_headings":"","what":"The ‘persistence’ class","title":"Persistence Homology Utilities","text":"package currently provides new data structure hosting persistence data. data set noisy_circle_points simulated data set consisting 100 points sampled circle additive Gaussian noise using standard deviation 0.050.05: data set noisy_circle_ripserr persistence diagram computed using ripserr package ripserr::vietoris_rips() stored object class ‘PHom’, light wrapper around data frame 3 variables: data set noisy_circle_tda_rips persistence diagram computed using TDA package TDA::ripsDiag() stored list length 1 containing object diagram class ‘diagram’, matrix 3 columns: data structure adopted tdaverse suite packages provided package designed common interface persistence data. allows seamless integration persistence data across different packages ensures data always consistent format. Specifically, ‘persistence’ class list following components: pairs: list 2-column matrices containing birth-death pairs. -th element list corresponds -th homology dimension. pairs given dimension pairs higher dimensions, corresponding element(s) /filled numeric matrix. metadata: list length 6 containing information data computed: orderered_pairs: boolean indicating whether pairs pairs list ordered (.e. first column strictly less second column). data: name object containing original data persistence data computed. engine: name package function package computed persistence data form \"package_name::package_function\". filtration: filtration used computation human-readable format (.e. full names, capitals need, etc.). parameters: list parameters used computation. call: exact call generated persistence data. as_persistence() function used convert persistence data different packages ‘persistence’ class. example, persistence data computed using ripserr package can converted ‘persistence’ class follows: Similarly, persistence data computed using TDA package can converted ‘persistence’ class follows:","code":"library(phutil) head(noisy_circle_points) #>               x          y #> [1,]  0.6651721  0.6363172 #> [2,] -0.7481066 -0.6901262 #> [3,] -0.8288544 -0.5519689 #> [4,] -0.7650181 -0.7436499 #> [5,]  0.6337296 -0.7607464 #> [6,] -0.6077663 -0.7036492 head(noisy_circle_ripserr) #>   dimension birth       death #> 1         0     0 0.008162723 #> 2         0     0 0.008548402 #> 3         0     0 0.009238432 #> 4         0     0 0.014004707 #> 5         0     0 0.020555701 #> 6         0     0 0.024621462 head(noisy_circle_tda_rips$diagram) #>      dimension Birth     Death #> [1,]         0     0 1.6322000 #> [2,]         0     0 0.3677392 #> [3,]         0     0 0.3325817 #> [4,]         0     0 0.3226673 #> [5,]         0     0 0.2096916 #> [6,]         0     0 0.1953531 as_persistence(noisy_circle_ripserr) #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 99 and 2 pairs in dimensions 0 and 1 respectively. #> ℹ Computed from a Vietoris-Rips/Cubical filtration using `ripserr::<vietoris_rips/cubical>()`. #> ! With unknown parameters. as_persistence(noisy_circle_tda_rips) #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 100 and 2 pairs in dimensions 0 and 1 respectively. #> ℹ Computed from a Vietoris-Rips filtration using `TDA::ripsDiag()`. #> ℹ With the following parameters: maxdimension = 1 and maxscale = 1.6322."},{"path":"https://tdaverse.github.io/phutil/index.html","id":"distances-between-persistence-diagrams","dir":"","previous_headings":"","what":"Distances between persistence diagrams","title":"Persistence Homology Utilities","text":"package also provides function compute bottleneck distance two persistence diagrams. function bottleneck_distance() takes two persistence diagrams input computes bottleneck distance : One can also compute Wasserstein distance two persistence diagrams using wasserstein_distance() function: also possible compute distances pairs persistence diagrams list using e.g. wasserstein_pairwise_distances(): returns object class ‘dist’. parallelized using OpenMP relies hood hera C++ library BSD-licensed. code interfacing R C++ generated header-{cpp11} package MIT-licensed.","code":"library(phutil) diag1 <- persistence_sample[[1]] diag2 <- persistence_sample[[2]] bottleneck_distance(diag1, diag2) #> [1] 0.06197891 wasserstein_distance(diag1, diag2) #> [1] 1.53403 wasserstein_pairwise_distances(persistence_sample[1:5]) #>          1        2        3        4 #> 2 1.534030                            #> 3 2.301812 1.852241                   #> 4 2.354967 2.362616 1.922799          #> 5 2.374818 2.707366 1.985518 3.154120"},{"path":[]},{"path":"https://tdaverse.github.io/phutil/index.html","id":"code-of-conduct","dir":"","previous_headings":"Contributions","what":"Code of Conduct","title":"Persistence Homology Utilities","text":"Please note phutil project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://tdaverse.github.io/phutil/index.html","id":"acknowledgments","dir":"","previous_headings":"Contributions","what":"Acknowledgments","title":"Persistence Homology Utilities","text":"project funded ISC grant R Consortium done coordination Jason Cory Brunson guidance Bertrand Michel Paul Rosen. builds upon conversations Mathieu Carrière Vincent Rouvreau among authors {GUDHI} library. Package development also benefited support colleagues Department Mathematics Jean Leray use equipment Nantes University.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances between two persistence diagrams — distances","title":"Distances between two persistence diagrams — distances","text":"collection functions computes distance two persistence diagrams homology dimension. diagrams must represented 2-column matrices. first column matrix contains birth times second column contains death times points.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances between two persistence diagrams — distances","text":"","code":"bottleneck_distance(x, y, tol = 1e-04, validate = TRUE, dimension = 0L)  wasserstein_distance(x, y, tol = 1e-04, p = 1, validate = TRUE, dimension = 0L)  kantorovich_distance(x, y, tol = 1e-04, p = 1, validate = TRUE, dimension = 0L)"},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances between two persistence diagrams — distances","text":"x Either matrix shape \\(n \\times 2\\) object class persistence specifying first persistence diagram. y Either matrix shape \\(m \\times 2\\) object class persistence specifying second persistence diagram. tol numeric value specifying relative error. Defaults 1e-4. Bottleneck distance, can set 0.0 case exact Bottleneck distance computed, approximate Bottleneck distance computed tol > 0.0. Wasserstein distance, must strictly positive. validate boolean value specifying whether validate input persistence diagrams. Defaults TRUE. FALSE, function check input persistence diagrams valid. can useful performance reasons, recommended keep TRUE safety. dimension integer value specifying homology dimension compute distance. Defaults 0L. used x y objects class persistence. p numeric value specifying power Wasserstein distance. Defaults 1.0.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances between two persistence diagrams — distances","text":"numeric value storing either Bottleneck Wasserstein distance two persistence diagrams.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distances between two persistence diagrams — distances","text":"matching \\(\\varphi : D_1 \\D_2\\) persistence diagrams bijection multisets, diagrams assumed points diagonal infinite multiplicity. \\(p\\)-Wasserstein distance \\(D_1\\) \\(D_2\\) defined infimum matchings expression $$W_p(D_1,D_2) = \\inf_{\\varphi: D_1 \\D_2} \\left( \\sum_{x \\D_1}{\\lVert x - \\varphi(x) \\rVert^p} \\right)^{\\frac{1}{p}}$$ can thought Minkowski distance diagrams viewed vectors shared coordinates defined matching \\(\\varphi\\). norm \\(\\lVert \\cdot \\rVert\\) can arbitrary; implemented , infinity norm \\(\\lVert (x_1,x_2) \\rVert_\\infty = \\max(x_1,x_2)\\). limit \\(p \\\\infty\\), Wasserstein distance becomes bottleneck distance: $$B(D_1,D_2) = \\inf_{\\varphi: D_1 \\D_2} \\sup_{x \\D_1}{\\lVert x - \\varphi(x) \\rVert}.$$ Wasserstein metric also called Kantorovich metric recognition originator metric.","code":""},{"path":[]},{"path":"https://tdaverse.github.io/phutil/reference/distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances between two persistence diagrams — distances","text":"","code":"bottleneck_distance(   persistence_sample[[1]]$pairs[[1]],   persistence_sample[[2]]$pairs[[1]] ) #> [1] 0.06197891  bottleneck_distance(   persistence_sample[[1]],   persistence_sample[[2]] ) #> [1] 0.06197891  wasserstein_distance(   persistence_sample[[1]]$pairs[[1]],   persistence_sample[[2]]$pairs[[1]] ) #> [1] 1.53403  wasserstein_distance(   persistence_sample[[1]],   persistence_sample[[2]] ) #> [1] 1.53403"},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Data: Noisy circle — noisy_circle","title":"Toy Data: Noisy circle — noisy_circle","text":"simulated data set consisting 100 points sampled circle additive Gaussian noise using standard deviation 0.05.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Data: Noisy circle — noisy_circle","text":"","code":"noisy_circle_points  noisy_circle_ripserr  noisy_circle_tda_rips"},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Data: Noisy circle — noisy_circle","text":"object class PHom (inherits data.frame) 101 rows 3 columns. object class list length 1.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"noisy-circle-points","dir":"Reference","previous_headings":"","what":"noisy_circle_points","title":"Toy Data: Noisy circle — noisy_circle","text":"matrix 100 rows 2 columns listing coordinates points.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"noisy-circle-ripserr","dir":"Reference","previous_headings":"","what":"noisy_circle_ripserr","title":"Toy Data: Noisy circle — noisy_circle","text":"object class 'PHom' returned ripserr::vietoris_rips() function, data frame 3 variables: dimension: dimension/degree feature, birth: birth value feature, death: death value feature.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"noisy-circle-tda-rips","dir":"Reference","previous_headings":"","what":"noisy_circle_tda_rips","title":"Toy Data: Noisy circle — noisy_circle","text":"list length 1 containing object class 'diagram' returned TDA::ripsDiag()$diagram function, matrix 3 columns: dimension: dimension/degree feature, birth: birth value feature, death: death value feature.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Data: Noisy circle — noisy_circle","text":"https://tdaverse.github.io/tdaunif/reference/circles.html, https://tdaverse.github.io/ripserr/reference/vietoris_rips.html, https://www.rdocumentation.org/packages/TDA/versions/1.9.1/topics/ripsDiag","code":""},{"path":"https://tdaverse.github.io/phutil/reference/noisy_circle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Toy Data: Noisy circle — noisy_circle","text":"point cloud stored noisy_circle_points generated using tdaunif package using tdaunif::sample_circle() function. Specifically, following parameters used: n = 100, sd = 0.05 seed 1234. persistence diagram stored noisy_circle_ripserr computed using ripserr package ripserr::vietoris_rips() function. Specifically, following parameters used: max_dim = 1L. persistence diagram stored noisy_circle_tda_rips computed using TDA package TDA::ripsDiag() function. Specifically, following parameters used: maxdimension = 1L maxscale = 1.6322.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/pairwise-distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise distances within a set of persistence diagrams — pairwise-distances","title":"Pairwise distances within a set of persistence diagrams — pairwise-distances","text":"collection functions computes pairwise distance matrix pairs set persistence diagrams homology dimension. diagrams must represented 2-column matrices. first column matrix contains birth times second column contains death times points.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/pairwise-distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise distances within a set of persistence diagrams — pairwise-distances","text":"","code":"bottleneck_pairwise_distances(   x,   tol = 1e-04,   validate = TRUE,   dimension = 0L,   ncores = 1L )  wasserstein_pairwise_distances(   x,   tol = 1e-04,   p = 1,   validate = TRUE,   dimension = 0L,   ncores = 1L )  kantorovich_pairwise_distances(   x,   tol = 1e-04,   p = 1,   validate = TRUE,   dimension = 0L,   ncores = 1L )"},{"path":"https://tdaverse.github.io/phutil/reference/pairwise-distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise distances within a set of persistence diagrams — pairwise-distances","text":"x list either 2-column matrices objects class persistence specifying set persistence diagrams. tol numeric value specifying relative error. Defaults 1e-4. Bottleneck distance, can set 0.0 case exact Bottleneck distance computed, approximate Bottleneck distance computed tol > 0.0. Wasserstein distance, must strictly positive. validate boolean value specifying whether validate input persistence diagrams. Defaults TRUE. FALSE, function check input persistence diagrams valid. can useful performance reasons, recommended keep TRUE safety. dimension integer value specifying homology dimension compute distance. Defaults 0L. used x y objects class persistence. ncores integer value specifying number cores use parallel computation. Defaults 1L. p numeric value specifying power Wasserstein distance. Defaults 1.0.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/pairwise-distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise distances within a set of persistence diagrams — pairwise-distances","text":"object class 'dist' containing pairwise distance matrix persistence diagrams.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/pairwise-distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise distances within a set of persistence diagrams — pairwise-distances","text":"","code":"spl <- persistence_sample[1:10]  # Extract the list of 2-column matrices for dimension 0 in the sample x <- lapply(spl[1:10], function(x) x$pairs[[1]])  # Compute the pairwise Bottleneck distances Db <- bottleneck_pairwise_distances(spl) Db <- bottleneck_pairwise_distances(x)  # Compute the pairwise Wasserstein distances Dw <- wasserstein_pairwise_distances(spl) Dw <- wasserstein_pairwise_distances(x)"},{"path":"https://tdaverse.github.io/phutil/reference/persistence-set.html","id":null,"dir":"Reference","previous_headings":"","what":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","title":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","text":"'S3' class object storing sets persistence diagrams","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","text":"","code":"as_persistence_set(x)  # S3 method for class 'persistence_set' format(x, ...)  # S3 method for class 'persistence_set' print(x, ...)"},{"path":"https://tdaverse.github.io/phutil/reference/persistence-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","text":"x list objects class persistence. ... Additional arguments passed function.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","text":"object class 'persistence_set' containing set persistence diagrams.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence-set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An 'S3' class object for storing sets of persistence diagrams — persistence-set","text":"","code":"# Create a persistence set from a list of persistence diagrams as_persistence_set(persistence_sample[1:10]) #>  #> ── Persistence Data Set ──────────────────────────────────────────────────────── #> ℹ A collection of 10 persistence diagrams."},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":null,"dir":"Reference","previous_headings":"","what":"An S3 class for storing persistence data — persistence","title":"An S3 class for storing persistence data — persistence","text":"collection functions coerce persistence data objects class persistence (See Value section details class). currently possible coerce persistence data following sources: matrix least 3 columns (dimension/degree, start/birth, end/death) returned ripserr::vietoris_rips() form 'PHom' class, list returned *Diag() function TDA package.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S3 class for storing persistence data — persistence","text":"","code":"as_persistence(x, warn = TRUE, ...)  # S3 method for class 'list' as_persistence(x, warn = TRUE, ...)  # S3 method for class 'persistence' as_persistence(x, warn = TRUE, ...)  # S3 method for class 'data.frame' as_persistence(x, warn = TRUE, ...)  # S3 method for class 'matrix' as_persistence(x, warn = TRUE, ...)  # S3 method for class 'diagram' as_persistence(x, warn = TRUE, ...)  # S3 method for class 'PHom' as_persistence(x, ...)  # S3 method for class 'hclust' as_persistence(x, warn = TRUE, birth = NULL, ...)  # S3 method for class 'persistence' print(x, ...)  # S3 method for class 'persistence' format(x, ...)  get_pairs(x, dimension, ...)  # S3 method for class 'persistence' as.matrix(x, ...)  # S3 method for class 'persistence' as.data.frame(x, row.names = NULL, optional = TRUE, ...)"},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S3 class for storing persistence data — persistence","text":"x R object containing persistence data coerced object class persistence. Currently supported forms : \\(\\geq 3\\)-column matrix (object coercible one) dimension/degree, start/birth end/death columns, list whose first element object, object class 'PHom' returned ripserr::vietoris_rips(), (list returned *Diag() function TDA (e.g. TDA::ripsDiag()) whose first element ) object class 'diagram'. warn boolean specifying whether issue warning input persistence data contained unordered pairs. Defaults TRUE. ... Parameters passed methods. birth numeric value specifying height declare leaves born. Defaults 0 heights non-negative -Inf otherwise. dimension non-negative integer specifying homology dimension recover matrix persistence pairs. row.names NULL character vector giving row     names data frame.  Missing values allowed. optional logical. TRUE, setting row names     converting column names (syntactic names: see     make.names) optional.  Note R's     base package .data.frame() methods use     optional column names treatment, basically     meaning data.frame(*, check.names = !optional).     See also make.names argument matrix method.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An S3 class for storing persistence data — persistence","text":"object class persistence list 2 elements: pairs: list 2-column matrices containing birth-death pairs. \\(\\)-th element list corresponds \\((-1)\\)-th homology dimension. pairs given dimension pairs higher dimensions, corresponding element(s) /filled \\(0 \\times 2\\) numeric matrix. metadata: list length 6 containing information data computed: orderered_pairs: boolean indicating whether pairs pairs list ordered (.e. first column strictly less second column). data: name object containing original data persistence data computed. engine: name package function package computed persistence data form \"package_name::package_function\". filtration: filtration used computation human-readable format (.e. full names, capitals need, etc.). parameters: list parameters used computation. call: exact call generated persistence data.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S3 class for storing persistence data — persistence","text":"Caution. providing unnamed input matrix, matrix coercer assumes least 3 columns, first column dimension/degree, second column start/birth third column end/death.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S3 class for storing persistence data — persistence","text":"","code":"as_persistence(noisy_circle_ripserr) #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 99 and 2 pairs in dimensions 0 and 1 respectively. #> ℹ Computed from a Vietoris-Rips/Cubical filtration using `ripserr::<vietoris_rips/cubical>()`. #> ! With unknown parameters.  x <- as_persistence(noisy_circle_tda_rips) x #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 100 and 2 pairs in dimensions 0 and 1 respectively. #> ℹ Computed from a Vietoris-Rips filtration using `TDA::ripsDiag()`. #> ℹ With the following parameters: maxdimension = 1 and maxscale = 1.6322.  as_persistence(x) #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 100 and 2 pairs in dimensions 0 and 1 respectively. #> ℹ Computed from a Vietoris-Rips filtration using `TDA::ripsDiag()`. #> ℹ With the following parameters: maxdimension = 1 and maxscale = 1.6322.  get_pairs(x, dimension = 1) #>            [,1]       [,2] #> [1,] 0.38239273 1.63218717 #> [2,] 0.07209847 0.07589632  as.data.frame(x) #>     dimension      birth       death #> 1           0 0.00000000 1.632200000 #> 2           0 0.00000000 0.367739240 #> 3           0 0.00000000 0.332581692 #> 4           0 0.00000000 0.322667292 #> 5           0 0.00000000 0.209691635 #> 6           0 0.00000000 0.195353064 #> 7           0 0.00000000 0.180419597 #> 8           0 0.00000000 0.177862977 #> 9           0 0.00000000 0.176442651 #> 10          0 0.00000000 0.169506194 #> 11          0 0.00000000 0.162200631 #> 12          0 0.00000000 0.160023839 #> 13          0 0.00000000 0.157216617 #> 14          0 0.00000000 0.157096157 #> 15          0 0.00000000 0.149973549 #> 16          0 0.00000000 0.145317069 #> 17          0 0.00000000 0.135505886 #> 18          0 0.00000000 0.130637844 #> 19          0 0.00000000 0.130409100 #> 20          0 0.00000000 0.124250763 #> 21          0 0.00000000 0.118818087 #> 22          0 0.00000000 0.117432967 #> 23          0 0.00000000 0.116982730 #> 24          0 0.00000000 0.111985578 #> 25          0 0.00000000 0.108047450 #> 26          0 0.00000000 0.107157343 #> 27          0 0.00000000 0.100600042 #> 28          0 0.00000000 0.100207281 #> 29          0 0.00000000 0.098008489 #> 30          0 0.00000000 0.096993058 #> 31          0 0.00000000 0.095547148 #> 32          0 0.00000000 0.094035885 #> 33          0 0.00000000 0.093127873 #> 34          0 0.00000000 0.093009295 #> 35          0 0.00000000 0.091994695 #> 36          0 0.00000000 0.091677657 #> 37          0 0.00000000 0.089061655 #> 38          0 0.00000000 0.087967986 #> 39          0 0.00000000 0.086923406 #> 40          0 0.00000000 0.084885493 #> 41          0 0.00000000 0.081223989 #> 42          0 0.00000000 0.080077051 #> 43          0 0.00000000 0.075611873 #> 44          0 0.00000000 0.075196405 #> 45          0 0.00000000 0.074676735 #> 46          0 0.00000000 0.073243933 #> 47          0 0.00000000 0.072876701 #> 48          0 0.00000000 0.072391768 #> 49          0 0.00000000 0.072299367 #> 50          0 0.00000000 0.071887979 #> 51          0 0.00000000 0.069296633 #> 52          0 0.00000000 0.068480870 #> 53          0 0.00000000 0.068176443 #> 54          0 0.00000000 0.065670399 #> 55          0 0.00000000 0.063840563 #> 56          0 0.00000000 0.063234392 #> 57          0 0.00000000 0.063189342 #> 58          0 0.00000000 0.059868540 #> 59          0 0.00000000 0.059285719 #> 60          0 0.00000000 0.058866113 #> 61          0 0.00000000 0.056665629 #> 62          0 0.00000000 0.056131890 #> 63          0 0.00000000 0.055221726 #> 64          0 0.00000000 0.054383073 #> 65          0 0.00000000 0.053424110 #> 66          0 0.00000000 0.052711260 #> 67          0 0.00000000 0.051592529 #> 68          0 0.00000000 0.050061244 #> 69          0 0.00000000 0.049106015 #> 70          0 0.00000000 0.048538771 #> 71          0 0.00000000 0.048131669 #> 72          0 0.00000000 0.047295623 #> 73          0 0.00000000 0.047067993 #> 74          0 0.00000000 0.046208831 #> 75          0 0.00000000 0.045668485 #> 76          0 0.00000000 0.045216427 #> 77          0 0.00000000 0.044062798 #> 78          0 0.00000000 0.043163334 #> 79          0 0.00000000 0.042355499 #> 80          0 0.00000000 0.040113039 #> 81          0 0.00000000 0.039172078 #> 82          0 0.00000000 0.035989881 #> 83          0 0.00000000 0.035517071 #> 84          0 0.00000000 0.035223243 #> 85          0 0.00000000 0.034865081 #> 86          0 0.00000000 0.034063248 #> 87          0 0.00000000 0.033248437 #> 88          0 0.00000000 0.029776983 #> 89          0 0.00000000 0.029389071 #> 90          0 0.00000000 0.027899370 #> 91          0 0.00000000 0.027031372 #> 92          0 0.00000000 0.026069254 #> 93          0 0.00000000 0.025996476 #> 94          0 0.00000000 0.024769890 #> 95          0 0.00000000 0.024621462 #> 96          0 0.00000000 0.020555701 #> 97          0 0.00000000 0.014004707 #> 98          0 0.00000000 0.009238432 #> 99          0 0.00000000 0.008548402 #> 100         0 0.00000000 0.008162723 #> 101         1 0.38239273 1.632187167 #> 102         1 0.07209847 0.075896319  # distances between cities euroclust <- hclust(eurodist, method = \"ward.D\") as_persistence(euroclust) #>  #> ── Persistence Data ──────────────────────────────────────────────────────────── #> ℹ There are 21 pairs in dimension 0 respectively. #> ℹ Computed from a Ward.D-Linkage filtration using `stats::hclust()`. #> ! With unknown parameters.  # `hclust()` can accommodate negative distances d <- as.dist(rbind(c(0, 3, -4), c(3, 0, 5), c(-4, 5, 0))) hc <- hclust(d, method = \"single\") ph <- as_persistence(hc, birth = -10) get_pairs(ph, 0) #>      birth death #> [1,]   -10    -4 #> [2,]   -10     3 #> [3,]   -10   Inf"},{"path":"https://tdaverse.github.io/phutil/reference/persistence_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Data: A sample of persistence diagrams — persistence_sample","title":"Toy Data: A sample of persistence diagrams — persistence_sample","text":"collection 100 samples size 100 sphere persistence diagram computed using TDA::ripsDiag() function parameters maxdimension = 1L maxscale = 1.6322. diagram generated using tdaunif::sample_2sphere() function following parameters: n = 100 sd = 0.05. seed fixed 1234.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/persistence_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Data: A sample of persistence diagrams — persistence_sample","text":"","code":"persistence_sample"},{"path":"https://tdaverse.github.io/phutil/reference/persistence_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Data: A sample of persistence diagrams — persistence_sample","text":"list length 100, element object class 'persistence'.","code":""},{"path":"https://tdaverse.github.io/phutil/reference/phutil-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phutil: Persistence Homology Utilities — phutil-package","title":"phutil: Persistence Homology Utilities — phutil-package","text":"Implements class hosting persistence homology information form persistence diagram. package also provides set functions manipulate persistence diagrams, coercing different formats compatibility packages plotting .","code":""},{"path":[]},{"path":"https://tdaverse.github.io/phutil/reference/phutil-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phutil: Persistence Homology Utilities — phutil-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@cnrs.fr (ORCID)","code":""}]
